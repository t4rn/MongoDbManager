@model RealEstate.Rentals.RentalsListVM
@using GridMvc.Html

@{
    ViewBag.Title = "Houses for rental";
}

<link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

<h2>@ViewBag.Title</h2>

<p>
    @Html.ActionLink("Add Rental", "Create", routeValues: null, htmlAttributes: new { @class = "btn btn-success" })
</p>

<div class="row">
    <div class="col-md-12">
        @using (Html.BeginForm())
        {
            <label for="PriceLimit">Maximum Price</label>
            <input type="text" name="PriceLimit" value="@Model.Filters.PriceLimit" />
            <label for="MinimumRooms">Minimum Rooms</label>
            <input type="text" name="MinimumRooms" value="@Model.Filters.MinimumRooms" />
            <input type="submit" value="Search" class="btn btn-primary" />
        }
    </div>
</div>
<br />
<div class="row">
    <div class="col-md-12">
        @Html.Grid(Model.Rentals).Columns(columns =>
           {
               columns.Add(r => r.Description).Sortable(true);
               columns.Add(r => r.NumberOfRooms).Titled("Rooms").SetWidth(30).Sortable(true);
               columns.Add(r => r.Address).RenderValueAs(e => string.Join(" ", e.Address));
               columns.Add(r => r.Price).Titled("Price").Format("{0:#,###0.00} zł").Sortable(true);
               columns.Add(r => r.Adjustments).RenderValueAs(a => a.Adjustments.Select(x => x.Describe()).LastOrDefault()).Titled("Last Adjustment");
               columns.Add().Encoded(false).Sanitized(false).SetWidth(30)
               .RenderValueAs(r => @Html.ActionLink("Details", "Details", new { id = r.Id }, htmlAttributes: new { @class = "btn btn-warning" }));
               columns.Add().Encoded(false).Sanitized(false).SetWidth(30)
               .RenderValueAs(r => @Html.ActionLink("Delete", "Delete", new { id = r.Id }, htmlAttributes: new { @class = "btn btn-danger" }));

           }).WithPaging(10)

    </div>
</div>